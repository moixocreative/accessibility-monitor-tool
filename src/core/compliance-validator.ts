import { AccessibilityViolation } from '../types';
import { logger } from '../utils/logger';

export interface ComplianceResult {
  level: 'Plenamente conforme' | 'Parcialmente conforme' | 'N√£o conforme';
  score: number;
  criteriaPassRate: number;
  reasons: string[];
  recommendations: string[];
}

export class ComplianceValidator {
  /**
   * Validar conformidade de uma p√°gina individual baseada nos crit√©rios do acessibilidade.gov.pt
   * Especificamente para quando useStandardFormula=true e criteriaSet=gov-pt
   */
  static validatePageCompliance(
    pageScore: number,
    violations: AccessibilityViolation[],
    criteriaSet: 'untile' | 'gov-pt' | 'custom' = 'gov-pt'
  ): ComplianceResult {
    logger.info(`üîç Validando conformidade da p√°gina - Score: ${pageScore}, Viola√ß√µes: ${violations.length}`);

    // Para crit√©rios gov-pt com f√≥rmula padr√£o, usar apenas a pontua√ß√£o do AccessMonitor (axe-core)
    if (criteriaSet === 'gov-pt') {
      return this.validateGovPtCompliance(pageScore, violations);
    }

    // Para outros crit√©rios, usar l√≥gica h√≠brida
    return this.validateHybridCompliance(pageScore, violations);
  }

  /**
   * Validar conformidade usando crit√©rios EXATOS do acessibilidade.gov.pt
   * Esta √© a implementa√ß√£o principal para TRUE + gov-pt
   */
  private static validateGovPtCompliance(
    pageScore: number,
    violations: AccessibilityViolation[]
  ): ComplianceResult {
    // Crit√©rios EXATOS do acessibilidade.gov.pt:
    // - Pontua√ß√£o superior a 9 = Plenamente conforme
    // - Pontua√ß√£o superior a 8 = Parcialmente conforme
    // - Pontua√ß√£o inferior a 8 = N√£o conforme

    let level: 'Plenamente conforme' | 'Parcialmente conforme' | 'N√£o conforme';
    const reasons: string[] = [];
    const recommendations: string[] = [];

    if (pageScore >= 9.0) {
      level = 'Plenamente conforme';
      reasons.push(`‚úÖ Pontua√ß√£o da p√°gina: ${pageScore}/10 (superior a 9.0)`);
      reasons.push('‚úÖ Crit√©rio acessibilidade.gov.pt: Pontua√ß√£o superior a 9 no AccessMonitor');
      recommendations.push('Manter o excelente n√≠vel de acessibilidade');
      recommendations.push('Considerar candidatura ao Selo de Acessibilidade Digital');
    } else if (pageScore >= 8.0) {
      level = 'Parcialmente conforme';
      reasons.push(`‚ö†Ô∏è Pontua√ß√£o da p√°gina: ${pageScore}/10 (entre 8.0 e 8.99)`);
      reasons.push('‚ö†Ô∏è Crit√©rio acessibilidade.gov.pt: Pontua√ß√£o superior a 8 no AccessMonitor');
      recommendations.push('Melhorar acessibilidade para atingir conformidade plena');
      recommendations.push('Corrigir viola√ß√µes cr√≠ticas e s√©rias prioritariamente');
      recommendations.push('Focar em melhorias que aumentem a pontua√ß√£o para 9+');
    } else {
      level = 'N√£o conforme';
      reasons.push(`‚ùå Pontua√ß√£o da p√°gina: ${pageScore}/10 (inferior a 8.0)`);
      reasons.push('‚ùå Crit√©rio acessibilidade.gov.pt: Pontua√ß√£o inferior a 8 no AccessMonitor');
      recommendations.push('Corrigir viola√ß√µes cr√≠ticas imediatamente');
      recommendations.push('Implementar plano de corre√ß√£o de acessibilidade priorit√°rio');
      recommendations.push('Considerar auditoria completa e especializada');
      recommendations.push('N√£o √© eleg√≠vel para o Selo de Acessibilidade Digital');
    }

    // Adicionar detalhes das viola√ß√µes
    if (violations.length > 0) {
      const criticalCount = violations.filter(v => v.severity === 'critical').length;
      const seriousCount = violations.filter(v => v.severity === 'serious').length;
      const moderateCount = violations.filter(v => v.severity === 'moderate').length;
      const minorCount = violations.filter(v => v.severity === 'minor').length;
      
      reasons.push(`üìä Total de viola√ß√µes: ${violations.length}`);
      if (criticalCount > 0) reasons.push(`üö® Viola√ß√µes cr√≠ticas: ${criticalCount}`);
      if (seriousCount > 0) reasons.push(`‚ö†Ô∏è Viola√ß√µes s√©rias: ${seriousCount}`);
      if (moderateCount > 0) reasons.push(`üî∂ Viola√ß√µes moderadas: ${moderateCount}`);
      if (minorCount > 0) reasons.push(`üî∏ Viola√ß√µes menores: ${minorCount}`);
    }

    return {
      level,
      score: pageScore,
      criteriaPassRate: 1.0, // Para gov-pt, usamos apenas a pontua√ß√£o
      reasons,
      recommendations
    };
  }

  /**
   * Validar conformidade usando l√≥gica h√≠brida (UNTILE + Gov.pt)
   */
  private static validateHybridCompliance(
    pageScore: number,
    violations: AccessibilityViolation[]
  ): ComplianceResult {
    // L√≥gica h√≠brida que considera tanto a pontua√ß√£o quanto os crit√©rios espec√≠ficos
    let level: 'Plenamente conforme' | 'Parcialmente conforme' | 'N√£o conforme';
    const reasons: string[] = [];
    const recommendations: string[] = [];

    // Determinar n√≠vel baseado na pontua√ß√£o
    if (pageScore >= 9.0) {
      level = 'Plenamente conforme';
      reasons.push(`‚úÖ Pontua√ß√£o excelente: ${pageScore}/10`);
    } else if (pageScore >= 8.0) {
      level = 'Parcialmente conforme';
      reasons.push(`‚ö†Ô∏è Pontua√ß√£o aceit√°vel: ${pageScore}/10`);
    } else {
      level = 'N√£o conforme';
      reasons.push(`‚ùå Pontua√ß√£o insuficiente: ${pageScore}/10`);
    }

    // Analisar viola√ß√µes por severidade
    const criticalViolations = violations.filter(v => v.severity === 'critical');
    const seriousViolations = violations.filter(v => v.severity === 'serious');

    if (criticalViolations.length > 0) {
      reasons.push(`üö® Viola√ß√µes cr√≠ticas: ${criticalViolations.length}`);
      if (level === 'Plenamente conforme') {
        level = 'Parcialmente conforme';
        reasons.push('‚ö†Ô∏è Rebaixado devido a viola√ß√µes cr√≠ticas');
      }
    }

    if (seriousViolations.length > 0) {
      reasons.push(`‚ö†Ô∏è Viola√ß√µes s√©rias: ${seriousViolations.length}`);
    }

    // Gerar recomenda√ß√µes baseadas no n√≠vel e viola√ß√µes
    if (level === 'Plenamente conforme') {
      recommendations.push('Manter excelente n√≠vel de acessibilidade');
      recommendations.push('Monitorizar regularmente para evitar regress√µes');
    } else if (level === 'Parcialmente conforme') {
      recommendations.push('Corrigir viola√ß√µes cr√≠ticas prioritariamente');
      recommendations.push('Melhorar viola√ß√µes s√©rias para atingir conformidade plena');
      recommendations.push('Implementar testes automatizados para prevenir regress√µes');
    } else {
      recommendations.push('Corrigir TODAS as viola√ß√µes cr√≠ticas imediatamente');
      recommendations.push('Implementar plano de corre√ß√£o estruturado');
      recommendations.push('Considerar auditoria especializada externa');
      recommendations.push('Estabelecer processo de valida√ß√£o cont√≠nua');
    }

    return {
      level,
      score: pageScore,
      criteriaPassRate: 1.0, // Para l√≥gica h√≠brida, usamos principalmente a pontua√ß√£o
      reasons,
      recommendations
    };
  }

  /**
   * Validar conformidade de m√∫ltiplas p√°ginas
   * Esta √© a fun√ß√£o principal para auditorias multi-p√°gina
   */
  static validateMultiPageCompliance(
    pageResults: Array<{ url: string; score: number; violations: AccessibilityViolation[] }>,
    criteriaSet: 'untile' | 'gov-pt' | 'custom' = 'gov-pt'
  ): ComplianceResult {
    logger.info(`üîç Validando conformidade de ${pageResults.length} p√°ginas com crit√©rios ${criteriaSet}`);

    if (pageResults.length === 0) {
      return {
        level: 'N√£o conforme',
        score: 0,
        criteriaPassRate: 0,
        reasons: ['Nenhuma p√°gina foi auditada'],
        recommendations: ['Executar auditoria completa do site']
      };
    }

    // Calcular pontua√ß√£o m√©dia
    const totalScore = pageResults.reduce((sum, page) => sum + page.score, 0);
    const averageScore = Math.round((totalScore / pageResults.length) * 100) / 100;

    // Verificar se TODAS as p√°ginas cumprem os crit√©rios m√≠nimos
    const allPagesCompliant = pageResults.every(page => {
      if (criteriaSet === 'gov-pt') {
        return page.score >= 8.0; // M√≠nimo para gov-pt conforme acessibilidade.gov.pt
      }
      return page.score >= 7.0; // M√≠nimo para outros crit√©rios
    });

    // Verificar se TODAS as p√°ginas cumprem crit√©rios para "Plenamente conforme"
    const allPagesFullyCompliant = pageResults.every(page => {
      if (criteriaSet === 'gov-pt') {
        return page.score > 9.0; // Para gov-pt: TODAS as p√°ginas devem ser > 9.0
      }
      return page.score >= 9.0; // Para outros crit√©rios
    });

    // Calcular taxa de aprova√ß√£o dos 10 aspetos cr√≠ticos (apenas para gov-pt)
    let criticalCriteriaPassRate = 1.0; // Default para outros crit√©rios
    if (criteriaSet === 'gov-pt') {
      // Contar quantos crit√©rios cr√≠ticos foram violados em todas as p√°ginas
      const criticalCriteriaIds = [
        '1.1.1', '1.4.3', '2.1.1', '2.4.1', '2.4.7', 
        '3.3.2', '4.1.2', '1.3.1', '2.2.1', '3.3.1'
      ];
      
      const totalCriticalCriteria = criticalCriteriaIds.length; // 10 crit√©rios
      let passedCriticalCriteria = totalCriticalCriteria;
      
      // Verificar cada crit√©rio cr√≠tico
      criticalCriteriaIds.forEach(criteriaId => {
        // Se alguma p√°gina violar este crit√©rio cr√≠tico, consideramos que falhou
        const hasViolation = pageResults.some(page => 
          page.violations.some(violation => violation.criteria.id === criteriaId)
        );
        if (hasViolation) {
          passedCriticalCriteria--;
        }
      });
      
      criticalCriteriaPassRate = passedCriticalCriteria / totalCriticalCriteria;
    }

    // Determinar n√≠vel de conformidade geral
    let level: 'Plenamente conforme' | 'Parcialmente conforme' | 'N√£o conforme';
    const reasons: string[] = [];
    const recommendations: string[] = [];

    if (criteriaSet === 'gov-pt') {
      // L√ìGICA EXATA para gov-pt conforme acessibilidade.gov.pt
      // CRIT√âRIO 1: Pontua√ß√£o do AccessMonitor
      // CRIT√âRIO 2: Checklist "10 aspetos cr√≠ticos"
      
      // Verificar requisitos para cada n√≠vel
      const allPagesAboveNine = pageResults.every(page => page.score > 9.0);
      const allPagesAboveEight = pageResults.every(page => page.score > 8.0);
      
      // Determinar n√≠vel baseado nos DOIS crit√©rios
      if (allPagesAboveNine && criticalCriteriaPassRate >= 0.75) {
        // ‚úÖ Plenamente conforme: TODAS as p√°ginas > 9.0 E ‚â•75% dos crit√©rios cr√≠ticos
        level = 'Plenamente conforme';
        reasons.push(`‚úÖ Pontua√ß√£o m√©dia: ${averageScore}/10`);
        reasons.push(`‚úÖ Todas as ${pageResults.length} p√°ginas com pontua√ß√£o superior a 9.0`);
        reasons.push(`‚úÖ Checklist "10 aspetos cr√≠ticos": ${Math.round(criticalCriteriaPassRate * 100)}% aprovados`);
        reasons.push('‚úÖ Crit√©rio acessibilidade.gov.pt: Plenamente conforme');
      } else if (allPagesAboveEight && criticalCriteriaPassRate >= 0.50) {
        // ‚ö†Ô∏è Parcialmente conforme: TODAS as p√°ginas > 8.0 E 50-75% dos crit√©rios cr√≠ticos
        level = 'Parcialmente conforme';
        reasons.push(`‚ö†Ô∏è Pontua√ß√£o m√©dia: ${averageScore}/10`);
        reasons.push(`‚úÖ Todas as ${pageResults.length} p√°ginas com pontua√ß√£o superior a 8.0`);
        reasons.push(`‚ö†Ô∏è Checklist "10 aspetos cr√≠ticos": ${Math.round(criticalCriteriaPassRate * 100)}% aprovados`);
        reasons.push('‚ö†Ô∏è Crit√©rio acessibilidade.gov.pt: Parcialmente conforme');
        
        // Mostrar detalhes do que n√£o est√° plenamente conforme
        if (!allPagesAboveNine) {
          const notFullyCompliantPages = pageResults.filter(p => p.score <= 9.0);
          reasons.push(`‚ö†Ô∏è ${notFullyCompliantPages.length} p√°ginas n√£o s√£o plenamente conforme (‚â§ 9.0)`);
        }
        if (criticalCriteriaPassRate < 0.75) {
          const failedCriticalCriteria = Math.round((1 - criticalCriteriaPassRate) * 10);
          reasons.push(`‚ö†Ô∏è ${failedCriticalCriteria} dos 10 aspetos cr√≠ticos falharam`);
        }
      } else {
        // ‚ùå N√£o conforme: Qualquer p√°gina ‚â§ 8.0 OU <50% dos crit√©rios cr√≠ticos
        level = 'N√£o conforme';
        reasons.push(`‚ùå Pontua√ß√£o m√©dia: ${averageScore}/10`);
        
        if (!allPagesAboveEight) {
          const nonCompliantPages = pageResults.filter(p => p.score <= 8.0);
          reasons.push(`‚ùå ${nonCompliantPages.length} p√°ginas com pontua√ß√£o ‚â§ 8.0`);
        }
        if (criticalCriteriaPassRate < 0.50) {
          const failedCriticalCriteria = Math.round((1 - criticalCriteriaPassRate) * 10);
          reasons.push(`‚ùå ${failedCriticalCriteria} dos 10 aspetos cr√≠ticos falharam (<50%)`);
        }
        
        reasons.push('‚ùå Crit√©rio acessibilidade.gov.pt: N√£o conforme');
      }
    } else {
      // L√≥gica para outros crit√©rios
      if (allPagesFullyCompliant) {
        level = 'Plenamente conforme';
        reasons.push(`‚úÖ Pontua√ß√£o m√©dia excelente: ${averageScore}/10`);
        reasons.push(`‚úÖ Todas as ${pageResults.length} p√°ginas com pontua√ß√£o ‚â• 9.0`);
      } else if (allPagesCompliant) {
        level = 'Parcialmente conforme';
        reasons.push(`‚ö†Ô∏è Pontua√ß√£o m√©dia: ${averageScore}/10`);
        reasons.push(`‚úÖ Todas as ${pageResults.length} p√°ginas cumprem crit√©rios m√≠nimos`);
        
        // Mostrar p√°ginas que n√£o s√£o plenamente conforme
        const notFullyCompliantPages = pageResults.filter(p => p.score < 9.0);
        if (notFullyCompliantPages.length > 0) {
          reasons.push(`‚ö†Ô∏è ${notFullyCompliantPages.length} p√°ginas n√£o s√£o plenamente conforme (< 9.0)`);
        }
      } else {
        level = 'N√£o conforme';
        reasons.push(`‚ùå Pontua√ß√£o m√©dia insuficiente: ${averageScore}/10`);
        if (!allPagesCompliant) {
          const nonCompliantPages = pageResults.filter(p => p.score < 7.0);
          reasons.push(`‚ùå ${nonCompliantPages.length} p√°ginas n√£o cumprem crit√©rios m√≠nimos`);
        }
      }
    }

    // Adicionar estat√≠sticas gerais
    const totalViolations = pageResults.reduce((sum, page) => sum + page.violations.length, 0);
    reasons.push(`üìä Total de viola√ß√µes em todas as p√°ginas: ${totalViolations}`);

    // Gerar recomenda√ß√µes baseadas no n√≠vel
    if (level === 'Plenamente conforme') {
      recommendations.push('Manter excelente n√≠vel de acessibilidade em todo o site');
      recommendations.push('Implementar monitoriza√ß√£o cont√≠nua para prevenir regress√µes');
      if (criteriaSet === 'gov-pt') {
        recommendations.push('‚úÖ Eleg√≠vel para candidatura ao Selo de Acessibilidade Digital');
        recommendations.push('Considerar certifica√ß√£o oficial de acessibilidade');
      }
    } else if (level === 'Parcialmente conforme') {
      recommendations.push('Corrigir viola√ß√µes nas p√°ginas com menor pontua√ß√£o');
      recommendations.push('Implementar processo de valida√ß√£o antes de deploy');
      recommendations.push('Estabelecer metas de melhoria mensais');
      if (criteriaSet === 'gov-pt') {
        recommendations.push('‚ö†Ô∏è Trabalhar para atingir conformidade plena (pontua√ß√£o 9+)');
      }
    } else {
      recommendations.push('Implementar plano de corre√ß√£o priorit√°rio');
      recommendations.push('Corrigir viola√ß√µes cr√≠ticas em todas as p√°ginas');
      recommendations.push('Considerar auditoria especializada externa');
      recommendations.push('Estabelecer processo de valida√ß√£o obrigat√≥rio');
      if (criteriaSet === 'gov-pt') {
        recommendations.push('‚ùå N√£o eleg√≠vel para o Selo de Acessibilidade Digital');
        recommendations.push('Focar em atingir pontua√ß√£o m√≠nima de 8.0 em todas as p√°ginas');
      }
    }

    return {
      level,
      score: averageScore,
      criteriaPassRate: criticalCriteriaPassRate,
      reasons,
      recommendations
    };
  }

  /**
   * Gerar relat√≥rio detalhado de conformidade
   */
  static generateComplianceReport(
    pageResults: Array<{ url: string; score: number; violations: AccessibilityViolation[] }>,
    criteriaSet: 'untile' | 'gov-pt' | 'custom' = 'gov-pt'
  ): string {
    const compliance = this.validateMultiPageCompliance(pageResults, criteriaSet);
    
    let report = `# Relat√≥rio de Conformidade - ${criteriaSet.toUpperCase()}\n\n`;
    report += `## N√≠vel de Conformidade: ${compliance.level}\n\n`;
    report += `**Pontua√ß√£o M√©dia:** ${compliance.score}/10\n`;
    report += `**Crit√©rios Cumpridos:** ${Math.round(compliance.criteriaPassRate * 100)}%\n\n`;

    report += `## Justifica√ß√£o\n\n`;
    compliance.reasons.forEach(reason => {
      report += `- ${reason}\n`;
    });

    report += `\n## Recomenda√ß√µes\n\n`;
    compliance.recommendations.forEach(rec => {
      report += `- ${rec}\n`;
    });

    report += `\n## An√°lise por P√°gina\n\n`;
    report += `| P√°gina | Pontua√ß√£o | Status | Viola√ß√µes |\n`;
    report += `|--------|-----------|---------|-----------|\n`;

    pageResults.forEach(page => {
      const pageCompliance = this.validatePageCompliance(page.score, page.violations, criteriaSet);
      const status = pageCompliance.level === 'Plenamente conforme' ? '‚úÖ' : 
                    pageCompliance.level === 'Parcialmente conforme' ? '‚ö†Ô∏è' : '‚ùå';
      
      report += `| ${page.url} | ${page.score}/10 | ${status} ${pageCompliance.level} | ${page.violations.length} |\n`;
    });

    return report;
  }
}
