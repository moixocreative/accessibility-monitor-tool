#!/usr/bin/env ts-node

import { WCAGValidator } from '../validation/wcag-validator';
import { getCriticalCriteria, PRIORITY_WCAG_CRITERIA } from '../core/wcag-criteria';
import { logger } from '../utils/logger';

async function main() {
  logger.info('Iniciando valida√ß√£o WCAG 2.1 AA');

  // Verificar ambiente
  const isCI = process.env.CI === 'true' || process.env.GITHUB_ACTIONS === 'true';
  if (isCI) {
    console.log('\nüèóÔ∏è  AMBIENTE CI/CD DETECTADO');
    console.log('================================');
    console.log('‚ö†Ô∏è  Browser n√£o dispon√≠vel - usando simula√ß√£o');
    console.log('üìä Resultados ser√£o simulados para teste');
  }

  // Obter URL do par√¢metro da linha de comando
  const url = process.argv[2];
  
  if (!url) {
    console.log('\nüìù URL n√£o fornecida - usando URL padr√£o');
    console.log('==========================================');
    console.log('Uso: yarn audit:wcag <URL>');
    console.log('Exemplo: yarn audit:wcag https://example.com');
    console.log('\nüîç Testando com URL padr√£o: https://www.untile.pt');
    console.log('üí° Para testar um site espec√≠fico, forne√ßa a URL como par√¢metro');
  }
  
  // Usar URL fornecida ou URL padr√£o
  const targetUrl = url || 'https://www.untile.pt';

  // Validar formato da URL
  try {
    new URL(targetUrl);
  } catch (error) {
    console.log('\n‚ùå ERRO: URL inv√°lida');
    console.log('================================');
    console.log(`URL fornecida: ${targetUrl}`);
    console.log('Certifique-se de incluir o protocolo (http:// ou https://)');
    process.exit(1);
  }

  const validator = new WCAGValidator();

  try {
    // Mostrar crit√©rios priorit√°rios (vers√£o resumida)
    console.log('\nüéØ CRIT√âRIOS WCAG 2.1 AA PRIORIT√ÅRIOS');
    console.log('========================================');
    console.log(`Total de crit√©rios: ${PRIORITY_WCAG_CRITERIA.length}`);
    console.log(`Crit√©rios cr√≠ticos (P0): ${getCriticalCriteria().length}`);

    // Executar auditoria real
    console.log(`\nüîç EXECUTANDO AUDITORIA WCAG`);
    console.log(`URL: ${targetUrl}`);

    // Criar um ID √∫nico para o site
    const siteId = `audit_${Date.now()}`;
    
    // Executar auditoria real
    const auditResult = await validator.auditSite(targetUrl, siteId);

    console.log('\nüìä RESULTADOS DA AUDITORIA');
    console.log('============================');
    
    if (auditResult.wcagScore === -1) {
      console.log(`Score WCAG: ‚ùå N√ÉO CALCULADO (Browser n√£o dispon√≠vel)`);
      console.log(`‚ö†Ô∏è  Auditoria limitada - Browser n√£o p√¥de ser inicializado`);
      console.log(`üí° Para auditoria completa, verifique a configura√ß√£o do Puppeteer`);
    } else {
      console.log(`Score WCAG: ${auditResult.wcagScore}%`);
    }
    
    console.log(`Total de viola√ß√µes: ${auditResult.violations.length}`);
    console.log(`Viola√ß√µes cr√≠ticas: ${auditResult.violations.filter(v => v.severity === 'critical').length}`);
    
    console.log('\nüìà SCORES LIGHTHOUSE');
    console.log(`  Acessibilidade: ${auditResult.lighthouseScore.accessibility}%`);
    console.log(`  Performance: ${auditResult.lighthouseScore.performance}%`);
    console.log(`  SEO: ${auditResult.lighthouseScore.seo}%`);
    console.log(`  Boas Pr√°ticas: ${auditResult.lighthouseScore.bestPractices}%`);

    // Mostrar viola√ß√µes encontradas
    if (auditResult.violations.length > 0) {
      console.log('\nüö® VIOLA√á√ïES ENCONTRADAS');
      console.log('==========================');
      auditResult.violations.forEach((violation, index) => {
        console.log(`\n${index + 1}. ${violation.criteria.id} - ${violation.criteria.name}`);
        console.log(`   Severidade: ${violation.severity}`);
        console.log(`   Descri√ß√£o: ${violation.description}`);
        console.log(`   Elemento: ${violation.element.substring(0, 100)}${violation.element.length > 100 ? '...' : ''}`);
      });
    } else {
      console.log('\n‚úÖ NENHUMA VIOLA√á√ÉO DETETADA');
    }

    // Resumo da conformidade
    console.log('\nüìã RESUMO DE CONFORMIDADE');
    console.log('==========================');
    
    if (auditResult.wcagScore === -1) {
      console.log(`Conformidade WCAG 2.1 AA: ‚ùì N√ÉO DETERMINADA`);
      console.log(`Motivo: Auditoria limitada devido a problemas t√©cnicos`);
    } else {
      const isCompliant = auditResult.wcagScore >= 80;
      console.log(`Conformidade WCAG 2.1 AA: ${isCompliant ? '‚úÖ CONFORME' : '‚ùå N√ÉO CONFORME'}`);
      console.log(`Percentagem de conformidade: ${auditResult.wcagScore}%`);
    }

    // Recomenda√ß√µes baseadas no score
    if (auditResult.wcagScore < 80) {
      console.log('\nüí° RECOMENDA√á√ïES');
      console.log('==================');
      console.log('‚Ä¢ Corrigir viola√ß√µes cr√≠ticas primeiro');
      console.log('‚Ä¢ Melhorar contraste de cores');
      console.log('‚Ä¢ Adicionar textos alternativos a imagens');
      console.log('‚Ä¢ Verificar navega√ß√£o por teclado');
      console.log('‚Ä¢ Validar estrutura sem√¢ntica HTML');
    }

    logger.info('Valida√ß√£o WCAG conclu√≠da');

  } catch (error) {
    logger.error('Erro na valida√ß√£o WCAG:', error);
    console.log('\n‚ùå ERRO NA AUDITORIA');
    console.log('=====================');
    console.log('Ocorreu um erro durante a auditoria:');
    console.log(error instanceof Error ? error.message : String(error));
    process.exit(1);
  } finally {
    await validator.close();
  }
}

if (require.main === module) {
  main().catch(error => {
    logger.error('Erro fatal:', error);
    process.exit(1);
  });
} 