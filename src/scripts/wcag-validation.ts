#!/usr/bin/env ts-node

import { WCAGValidator } from '../validation/wcag-validator';
import { getCriticalCriteria, PRIORITY_WCAG_CRITERIA } from '../core/wcag-criteria';
import { logger } from '../utils/logger';

async function main() {
  logger.info('Iniciando valida√ß√£o WCAG 2.1 AA');

  // Verificar ambiente
  const isCI = process.env.CI === 'true' || process.env.GITHUB_ACTIONS === 'true';
  if (isCI) {
    console.log('\nüèóÔ∏è  AMBIENTE CI/CD DETECTADO');
    console.log('================================');
    console.log('‚ö†Ô∏è  Browser n√£o dispon√≠vel - usando simula√ß√£o');
    console.log('üìä Resultados ser√£o simulados para teste');
  }

  // Obter URL e tipo de auditoria dos par√¢metros da linha de comando
  const url = process.argv[2];
  const auditType = process.argv[3]?.toLowerCase();
  
  if (!url) {
    console.log('\nüìù URL n√£o fornecida - usando URL padr√£o');
    console.log('==========================================');
    console.log('Uso: yarn audit:wcag <URL> [tipo]');
    console.log('Tipos dispon√≠veis:');
    console.log('  simple  - Apenas 15 crit√©rios priorit√°rios (padr√£o)');
    console.log('  complete - Todos os crit√©rios WCAG 2.1 AA');
    console.log('Exemplo: yarn audit:wcag https://example.com complete');
    console.log('\nüîç Testando com URL padr√£o: https://www.untile.pt');
    console.log('üí° Para testar um site espec√≠fico, forne√ßa a URL como par√¢metro');
  }
  
  // Usar URL fornecida ou URL padr√£o
  const targetUrl = url || 'https://www.untile.pt';
  
  // Determinar tipo de auditoria
  const isCompleteAudit = auditType === 'complete';
  const auditTypeDisplay = isCompleteAudit ? 'COMPLETA' : 'SIMPLES';

  // Validar formato da URL
  try {
    new URL(targetUrl);
  } catch (error) {
    console.log('\n‚ùå ERRO: URL inv√°lida');
    console.log('================================');
    console.log(`URL fornecida: ${targetUrl}`);
    console.log('Certifique-se de incluir o protocolo (http:// ou https://)');
    process.exit(1);
  }

  const validator = new WCAGValidator();

  try {
    // Mostrar informa√ß√µes sobre o tipo de auditoria
    console.log('\nüéØ TIPO DE AUDITORIA WCAG 2.1 AA');
    console.log('==================================');
    console.log(`Tipo: ${auditTypeDisplay}`);
    
    if (isCompleteAudit) {
      console.log('üìã Testando TODOS os crit√©rios WCAG 2.1 AA');
      console.log('‚ö†Ô∏è  Auditoria completa pode demorar mais tempo');
    } else {
      console.log(`üìã Testando ${PRIORITY_WCAG_CRITERIA.length} crit√©rios priorit√°rios`);
      console.log(`Crit√©rios cr√≠ticos (P0): ${getCriticalCriteria().length}`);
    }

    // Executar auditoria real
    console.log(`\nüîç EXECUTANDO AUDITORIA WCAG`);
    console.log(`URL: ${targetUrl}`);
    console.log(`Tipo: ${auditTypeDisplay}`);

    // Criar um ID √∫nico para o site
    const siteId = `audit_${Date.now()}`;
    
    // Executar auditoria real
    const auditResult = await validator.auditSite(targetUrl, siteId, isCompleteAudit);

    console.log('\nüìä RESULTADOS DA AUDITORIA');
    console.log('============================');
    
    if (auditResult.wcagScore === -1) {
      console.log(`Score WCAG: ‚ùå N√ÉO CALCULADO (Browser n√£o dispon√≠vel)`);
      console.log(`‚ö†Ô∏è  Auditoria limitada - Browser n√£o p√¥de ser inicializado`);
      console.log(`üí° Para auditoria completa, verifique a configura√ß√£o do Puppeteer`);
    } else {
      console.log(`Score WCAG: ${auditResult.wcagScore}%`);
    }
    
    console.log(`Total de viola√ß√µes: ${auditResult.violations.length}`);
    console.log(`Viola√ß√µes cr√≠ticas: ${auditResult.violations.filter(v => v.severity === 'critical').length}`);
    
    // Separar viola√ß√µes por tipo de auditoria
    const priorityViolations = auditResult.violations.filter(v => 
      PRIORITY_WCAG_CRITERIA.some(criteria => criteria.id === v.criteria.id)
    );
    const otherViolations = auditResult.violations.filter(v => 
      !PRIORITY_WCAG_CRITERIA.some(criteria => criteria.id === v.criteria.id)
    );

    if (isCompleteAudit) {
      console.log('\nüìã VIOLA√á√ïES DOS 15 CRIT√âRIOS PRIORIT√ÅRIOS');
      console.log('=============================================');
      console.log(`Viola√ß√µes priorit√°rias: ${priorityViolations.length}`);
      if (priorityViolations.length > 0) {
        priorityViolations.forEach((violation, index) => {
          console.log(`${index + 1}. ${violation.criteria.id} - ${violation.criteria.name}`);
          console.log(`   Severidade: ${violation.severity}`);
          console.log(`   Descri√ß√£o: ${violation.description}`);
        });
      } else {
        console.log('‚úÖ Nenhuma viola√ß√£o encontrada nos crit√©rios priorit√°rios');
      }

      console.log('\nüìã VIOLA√á√ïES DOS CRIT√âRIOS ADICIONAIS');
      console.log('========================================');
      console.log(`Viola√ß√µes adicionais: ${otherViolations.length}`);
      if (otherViolations.length > 0) {
        otherViolations.forEach((violation, index) => {
          console.log(`${index + 1}. ${violation.criteria.id} - ${violation.criteria.name}`);
          console.log(`   Severidade: ${violation.severity}`);
          console.log(`   Descri√ß√£o: ${violation.description}`);
        });
      } else {
        console.log('‚úÖ Nenhuma viola√ß√£o encontrada nos crit√©rios adicionais');
      }
    } else {
      console.log('\nüìã VIOLA√á√ïES DOS CRIT√âRIOS PRIORIT√ÅRIOS');
      console.log('=========================================');
      if (auditResult.violations.length > 0) {
        auditResult.violations.forEach((violation, index) => {
          console.log(`${index + 1}. ${violation.criteria.id} - ${violation.criteria.name}`);
          console.log(`   Severidade: ${violation.severity}`);
          console.log(`   Descri√ß√£o: ${violation.description}`);
        });
      } else {
        console.log('‚úÖ Nenhuma viola√ß√£o encontrada');
      }
    }
    
    console.log('\nüìà SCORES LIGHTHOUSE');
    console.log(`  Acessibilidade: ${auditResult.lighthouseScore.accessibility}%`);
    console.log(`  Performance: ${auditResult.lighthouseScore.performance}%`);
    console.log(`  SEO: ${auditResult.lighthouseScore.seo}%`);
    console.log(`  Boas Pr√°ticas: ${auditResult.lighthouseScore.bestPractices}%`);

    // Mostrar recomenda√ß√µes baseadas no tipo de auditoria
    console.log('\nüí° RECOMENDA√á√ïES');
    console.log('==================');
    
    if (auditResult.wcagScore === -1) {
      console.log('‚ùå N√£o foi poss√≠vel executar a auditoria completa');
      console.log('üîß Verifique a configura√ß√£o do browser e tente novamente');
    } else if (auditResult.wcagScore >= 90) {
      console.log('‚úÖ Excelente conformidade WCAG 2.1 AA');
      console.log('üéâ O site est√° muito bem otimizado para acessibilidade');
    } else if (auditResult.wcagScore >= 70) {
      console.log('‚ö†Ô∏è  Boa conformidade, mas h√° espa√ßo para melhorias');
      console.log('üîß Considere corrigir as viola√ß√µes identificadas');
    } else if (auditResult.wcagScore >= 50) {
      console.log('‚ö†Ô∏è  Conformidade moderada - melhorias necess√°rias');
      console.log('üö® Priorize a corre√ß√£o das viola√ß√µes cr√≠ticas');
    } else {
      console.log('‚ùå Baixa conformidade WCAG 2.1 AA');
      console.log('üö® Corre√ß√µes urgentes necess√°rias para acessibilidade');
    }

    if (isCompleteAudit && otherViolations.length > 0) {
      console.log('\nüìù Para auditoria mais detalhada dos crit√©rios adicionais:');
      console.log('   - Consulte a documenta√ß√£o WCAG 2.1 AA completa');
      console.log('   - Considere implementar corre√ß√µes progressivas');
    }

  } catch (error) {
    logger.error('Erro na valida√ß√£o WCAG:', error);
    console.log('\n‚ùå ERRO NA AUDITORIA');
    console.log('=====================');
    console.log('Ocorreu um erro durante a auditoria:');
    console.log(error instanceof Error ? error.message : String(error));
    process.exit(1);
  } finally {
    try {
      console.log('\nüßπ Limpando recursos...');
      await Promise.race([
        validator.close(),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Cleanup timeout')), 15000)
        )
      ]);
      console.log('‚úÖ Recursos limpos com sucesso');
    } catch (cleanupError) {
      console.log('‚ö†Ô∏è  Erro durante limpeza de recursos:', cleanupError);
      // Continuar mesmo com erro de cleanup
    }
  }
}

main().catch(error => {
  logger.error('Erro fatal na valida√ß√£o WCAG:', error);
  console.log('\nüí• ERRO FATAL');
  console.log('==============');
  console.log('Ocorreu um erro inesperado:');
  console.log(error instanceof Error ? error.message : String(error));
  process.exit(1);
}); 