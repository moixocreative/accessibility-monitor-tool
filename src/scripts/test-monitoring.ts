#!/usr/bin/env ts-node

import { PortfolioMonitor } from '../monitoring/portfolio-monitor';
import { logger } from '../utils/logger';

async function main() {
  logger.info('üß™ Testando sistema de monitoriza√ß√£o peri√≥dica');

  const portfolioMonitor = new PortfolioMonitor();

  try {
    // Testar configura√ß√£o
    console.log('\nüìä TESTE DE CONFIGURA√á√ÉO');
    console.log('==========================');
    
    const monitoringStats = portfolioMonitor.getMonitoringStats();
    console.log(`Intervalo configurado: ${monitoringStats.interval}`);
    console.log(`Monitoriza√ß√£o ativa: ${monitoringStats.isActive ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(`Pr√≥xima execu√ß√£o: ${monitoringStats.nextRun?.toLocaleString('pt-PT') || 'N/A'}`);

    // Testar valida√ß√£o de express√µes cron
    console.log('\nüîç TESTE DE VALIDA√á√ÉO CRON');
    console.log('============================');
    
    const testExpressions = [
      '0 */6 * * *',      // A cada 6 horas
      '0 0 * * *',        // Diariamente √† meia-noite
      '0 */12 * * *',     // A cada 12 horas
      '0 9,18 * * *',     // Duas vezes por dia
      'invalid-cron',     // Inv√°lida
      '0 0 * * 1'         // Semanalmente
    ];

    testExpressions.forEach(expr => {
      try {
        const { validateCronExpression } = require('cron');
        const validation = validateCronExpression(expr);
        console.log(`${expr}: ${validation.valid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida'}`);
        if (!validation.valid) {
          console.log(`  Erro: ${validation.error}`);
        }
      } catch (error) {
        console.log(`${expr}: ‚ùå Erro na valida√ß√£o`);
      }
    });

    // Testar auditoria √∫nica
    console.log('\nüîç TESTE DE AUDITORIA √öNICA');
    console.log('=============================');
    
    console.log('Executando auditoria completa do portfolio...');
    await portfolioMonitor.runPortfolioAudit();
    
    const stats = portfolioMonitor.getPortfolioStats();
    console.log(`‚úÖ Auditoria conclu√≠da:`);
    console.log(`  - Sites auditados: ${stats.totalSites}`);
    console.log(`  - Score m√©dio: ${stats.averageScore}%`);
    console.log(`  - Viola√ß√µes: ${stats.totalViolations}`);
    console.log(`  - Cr√≠ticas: ${stats.criticalViolations}`);

    // Testar monitoriza√ß√£o (por 30 segundos)
    console.log('\nüîÑ TESTE DE MONITORIZA√á√ÉO (30 segundos)');
    console.log('========================================');
    
    portfolioMonitor.startMonitoring();
    console.log('‚úÖ Monitoriza√ß√£o iniciada');
    
    // Aguardar 30 segundos
    await new Promise(resolve => setTimeout(resolve, 30000));
    
    const finalStats = portfolioMonitor.getMonitoringStats();
    console.log('‚úÖ Teste conclu√≠do:');
    console.log(`  - Monitoriza√ß√£o ativa: ${finalStats.isActive ? 'Sim' : 'N√£o'}`);
    console.log(`  - Pr√≥xima execu√ß√£o: ${finalStats.nextRun?.toLocaleString('pt-PT') || 'N/A'}`);
    console.log(`  - √öltima execu√ß√£o: ${finalStats.lastRun?.toLocaleString('pt-PT') || 'N/A'}`);

    // Parar monitoriza√ß√£o
    portfolioMonitor.stopMonitoring();
    console.log('‚úÖ Monitoriza√ß√£o parada');

    console.log('\nüéâ Todos os testes conclu√≠dos com sucesso!');

  } catch (error) {
    logger.error('Erro no teste de monitoriza√ß√£o:', error);
    console.error('‚ùå Erro no teste:', error instanceof Error ? error.message : String(error));
    process.exit(1);
  } finally {
    await portfolioMonitor.cleanup();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erro n√£o tratado:', error);
    process.exit(1);
  });
}

export { main as testMonitoring };
