#!/usr/bin/env ts-node

import { PortfolioMonitor } from '../monitoring/portfolio-monitor';
import { EmergencyResponse } from '../emergency/emergency-response';
import { logger } from '../utils/logger';

async function main() {
  logger.info('üöÄ Iniciando sistema de monitoriza√ß√£o peri√≥dica UNTILE');

  const portfolioMonitor = new PortfolioMonitor();
  const emergencyResponse = new EmergencyResponse();

  try {
    // Verificar configura√ß√£o
    const monitoringStats = portfolioMonitor.getMonitoringStats();
    
    console.log('\nüìä CONFIGURA√á√ÉO DA MONITORIZA√á√ÉO');
    console.log('==================================');
    console.log(`Intervalo: ${monitoringStats.interval}`);
    console.log(`Ativo: ${monitoringStats.isActive ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(`Pr√≥xima execu√ß√£o: ${monitoringStats.nextRun?.toLocaleString('pt-PT') || 'N/A'}`);

    // Iniciar monitoriza√ß√£o cont√≠nua
    portfolioMonitor.startMonitoring();

    // Executar auditoria inicial imediatamente
    console.log('\nüîç Executando auditoria inicial...');
    await portfolioMonitor.runPortfolioAudit();

    // Verificar SLA breaches
    const slaBreaches = emergencyResponse.checkSLABreaches();
    if (slaBreaches.length > 0) {
      console.log(`\n‚ö†Ô∏è  ${slaBreaches.length} incidentes com SLA excedido`);
    }

    // Mostrar estat√≠sticas do portfolio
    const stats = portfolioMonitor.getPortfolioStats();
    console.log('\nüìà ESTAT√çSTICAS DO PORTFOLIO');
    console.log('==============================');
    console.log(`Total de sites: ${stats.totalSites}`);
    console.log(`Score m√©dio WCAG: ${stats.averageScore}%`);
    console.log(`Total de viola√ß√µes: ${stats.totalViolations}`);
    console.log(`Viola√ß√µes cr√≠ticas: ${stats.criticalViolations}`);

    // Manter processo ativo
    console.log('\nüîÑ Sistema de monitoriza√ß√£o ativo. Pressione Ctrl+C para parar.');
    
    process.on('SIGINT', async () => {
      console.log('\nüõë Recebido sinal de paragem, limpando recursos...');
      await portfolioMonitor.cleanup();
      console.log('‚úÖ Sistema parado com sucesso');
      process.exit(0);
    });

    // Log peri√≥dico de status
    setInterval(() => {
      const currentStats = portfolioMonitor.getMonitoringStats();
      logger.info('Status da monitoriza√ß√£o', {
        isActive: currentStats.isActive,
        nextRun: currentStats.nextRun?.toISOString(),
        lastRun: currentStats.lastRun?.toISOString()
      });
    }, 300000); // A cada 5 minutos

  } catch (error) {
    logger.error('Erro no sistema de monitoriza√ß√£o:', error);
    console.error('‚ùå Erro fatal:', error instanceof Error ? error.message : String(error));
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erro n√£o tratado:', error);
    process.exit(1);
  });
}

export { main as startMonitoring };
